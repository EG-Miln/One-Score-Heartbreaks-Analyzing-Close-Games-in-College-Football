## PREDICTIVE MODELING 
## DESCRIPTION: THIS SCRIPT BUILDS AND EVALUATES A LOGISTIC REGRESSION MODEL TO PREDICT OUTCOMES FOR ONE-SCORE GAMES IN COLLEGE FOOTBALL
## USING TEAM STATS FROM PREVIOUS FBS SEASONS

## MAIN SUMMARY OF THE PROCESS
# 1) LOAD HISTORICAL TEAM STATS FOR WINNERS AND LOSERS (2018, 2019, 2021-2023) AS TRAINING DATA
# 2) LOAD TEAM STATS FOR A TARGET SEASON (2024) AS TEST DATA
# 3) TRAIN A LOGISTIC REGRESSION MODEL ON THE TRAINING DATA
# 4) PREDICT AND EVALUATE PERFORMANCE ON THE TEST DATA USING THE FOLLOWING:
# - ACCURACY
# - CONFUSION MATRIX
# - CLASSICATION REPORT
# - ROC AUC SCORE
# - DISPLAYS LOGISTIC REGRESSION COEFFICIENTS AS A MEASURE OF FEATURE IMPORTANCE

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score

# --- CONFIGURATION (YOU MAY NEED TO UPDATE ON YOUR COMPUTER) ---
winner_file = 'C:/Users/lseminario/Downloads/all_games_team_stats_winners_PreviousSeasons.xlsx'
loser_file = 'C:/Users/lseminario/Downloads/all_games_team_stats_losers_PreviousSeasons.xlsx'
test_file = 'C:/Users/lseminario/Downloads/all_games_team_stats_summary.xlsx'

# --- LOAD TRAINING DATA (FBS SEASONS FROM 2018, 2019, AND 2021-2023)
df_winners = pd.read_excel(winner_file)
df_winners['Result'] = 1

df_losers = pd.read_excel(loser_file)
df_losers['Result'] = 0

df_train = pd.concat([df_winners, df_losers], ignore_index=True)

# --- LOAD TESTING DATA (2024 FBS SEASON)
df_test = pd.read_excel(test_file)

# --- MAP THE TESTING RESULT COLUMN (e.g. Winner -> 1 ; Loser -> 0)
if df_test['Result'].dtype == object:
    df_test['Result'] = df_test['Result'].map({'winner': 1, 'loser': 0})

# --- KEY FEATURES 
feature_cols = ['thirdDownEff', 
                'completionAttempts', 
                'yardsPerPass', 
                'rushingYards', 
                'possessionTime']

# --- CONVERT possessionTime (e.g. "30:45") TO TOTAL SECONDS (e.g. "1845")
def time_to_seconds(time_str):
    try:
        minutes, seconds = map(int, str(time_str).split(':'))
        return minutes * 60 + seconds
    except:
        return None

# --- APPLY TIME CONVERSION 
df_train['possessionTime'] = df_train['possessionTime'].apply(time_to_seconds)
df_test['possessionTime'] = df_test['possessionTime'].apply(time_to_seconds)

# --- HANDLE MISSING VALUES 
for col in feature_cols:
    median_train = df_train[col].median()
    median_test = df_test[col].median()
    df_train[col] = df_train[col].fillna(median_train)
    df_test[col] = df_test[col].fillna(median_test)

# --- SET X AND y 
X_train = df_train[feature_cols]
y_train = df_train['Result']

X_test = df_test[feature_cols]
y_test = df_test['Result']

# --- SCALE THE FEATURES 
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# --- TRAIN LOGISTIC REGRESSION 
model = LogisticRegression(max_iter=1000, solver='lbfgs')
model.fit(X_train_scaled, y_train)

# --- PREDICTION
y_pred = model.predict(X_test_scaled)
y_prob = model.predict_proba(X_test_scaled)[:,1]

# --- EVALUATION
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))
print("ROC AUC:", roc_auc_score(y_test, y_prob))

# --- FEATURE IMPORTANCE 
importances = pd.Series(model.coef_[0], index=feature_cols)
print("\n Feature importance (logistic regression coefficients):")
print(importances.sort_values(ascending=False))
